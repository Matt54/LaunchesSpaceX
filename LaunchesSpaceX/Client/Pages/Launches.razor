@using Newtonsoft.Json
@using System.Globalization;
@inject HttpClient Http
@using Telerik.DataSource;

<div>
    @if (request == null)
    {
        <h2 style="width:100%;text-align:center; margin-bottom: 20px;">Loading...</h2>
        <div class="loader"></div>
    }
    else
    {
        <h2 style="width:100%;text-align:center; margin-bottom: 20px;">SpaceX Launches</h2>
        <div  style="margin:auto;">
            <TelerikGrid Data="@request.Results" Pageable="true" Sortable="false" Reorderable="false" Height="660px" RowHeight=90 PageSize="20">
                <GridColumns>

                    <GridColumn Width="105px" Field="@(nameof(Launch.PatchURL))" Title="Wiki Link">
                        <Template>
                            @{
                                var launch = context as Launch;
                                if (String.IsNullOrEmpty(launch.WikiURL))
                                {
                                    <div style="text-align:center;"> No Link Found</div>
                                }
                                else if (String.IsNullOrEmpty(launch.PatchURL))
                                {
                                    <a href="@($"{launch.WikiURL}")" target="_blank">
                                        <div style="text-align:center;"> No Patch Found</div>
                                    </a>
                                }
                                else
                                {
                                    <a href="@($"{launch.WikiURL}")" target="_blank">
                                        <img style="display: block; margin:auto;" width="80" height="80" class="rounded" src="@($"{launch.PatchURL}")" />
                                    </a>
                                }
                            }
                        </Template>
                        <HeaderTemplate>
                            <div style="text-align:center; font-weight:bolder">Wiki Link</div>
                        </HeaderTemplate>
                    </GridColumn>

                    <GridColumn Field="@(nameof(Launch.DateTime))" Title="Date and Time" Width="200px">
                        <Template>
                            <div style="text-align:center;"> @((context as Launch).DateTime) </div>
                        </Template>
                        <HeaderTemplate>
                            <div style="text-align:center; font-weight:bolder">Date and Time (CST)</div>
                        </HeaderTemplate>
                    </GridColumn>

                    <GridColumn Field="@(nameof(Launch.Name))" Title="Launch Name" Width="280px">
                        <Template>
                            <div style="text-align:center;"> @((context as Launch).Name) </div>
                        </Template>
                        <HeaderTemplate>
                            <div style="text-align:center; font-weight:bolder">Launch Name</div>
                        </HeaderTemplate>
                    </GridColumn>

                    <GridColumn Field="@(nameof(Launch.WasSuccessful))" Title="Success?" Width="100px">
                        <Template>
                            @{
                                var launch = context as Launch;

                                if (launch.WasSuccessful)
                                {
                                    <span style="display: table; margin: 0 auto;" class="oi oi-thumb-up" aria-hidden="true"></span>
                                }
                                else
                                {
                                    <span style="display: table; margin: 0 auto;" class="oi oi-thumb-down" aria-hidden="true"></span>
                                }
                            }
                        </Template>
                        <HeaderTemplate>
                            <div style="text-align:center; font-weight:bolder">Success?</div>
                        </HeaderTemplate>
                    </GridColumn>

                    <GridColumn Field="@(nameof(Launch.Mass))" Title="Mass (kg)" Width="120px">
                        <Template>
                            @{
                                var launch = context as Launch;

                                if (launch.Mass == 0)
                                {
                                    <div style="text-align:center;"> (Null) </div>
                                }
                                else
                                {
                                    <div style="text-align:center;"> @((context as Launch).Mass) </div>
                                }
                            }
                        </Template>
                        <HeaderTemplate>
                            <div style="text-align:center; font-weight:bolder">Mass (kg)</div>
                        </HeaderTemplate>
                    </GridColumn>

                    <GridColumn Field="@(nameof(Launch.MassRank))" Title="Payload Rank" Width="120px">
                        <Template>
                            @{
                                var launch = context as Launch;

                                if (launch.Mass == 0)
                                {
                                    <div style="text-align:center;"> N/A </div>
                                }
                                else
                                {
                                    <div style="text-align:center;"> @((context as Launch).MassRank) </div>
                                }
                            }
                        </Template>
                        <HeaderTemplate>
                            <div style="text-align:center; font-weight:bolder">Payload Rank</div>
                        </HeaderTemplate>
                    </GridColumn>

                </GridColumns>
            </TelerikGrid>
        </div>
    }
</div>


@code {

    // Data model that binds to the grid view - holds the information about each mission
    LaunchRequest request = null;

    // Called when page is initialized
    protected override async Task OnInitializedAsync()
    {
        LaunchRequest launchRequest = new LaunchRequest(Http);

        //get all the launches
        await launchRequest.GetPastLaunchesFromAPI();

        request = launchRequest;
    }

    /// <summary>
    /// Data model that makes API call and stores the information about each launch
    /// </summary>
    public class LaunchRequest
    {
        HttpClient Http { get; set; }
        public List<Launch> Results { get; set; }

        public LaunchRequest(HttpClient _Http)
        {
            Http = _Http;
            Results = new List<Launch>();
        }

        public async Task GetLatestLaunchFromAPI()
        {
            HttpResponseMessage response = await Http.GetAsync("https://api.spacexdata.com/v4/launches/latest");
            response.EnsureSuccessStatusCode();
            string json = await response.Content.ReadAsStringAsync();
            dynamic obj = JsonConvert.DeserializeObject(json);
            string dateString = obj.date_utc;
            Launch launch = new Launch(Convert.ToString(obj.name), DateTime.Parse(dateString), obj.success.ToObject<bool>());
            await launch.AddPayloads(obj.payloads.ToObject<List<String>>(), Http);
            Results.Add(launch);
        }

        /// <summary>
        /// Makes HTTP request to SpaceX API to get information about each of their past launches. Stores results in list of type Launch.
        /// </summary>
        public async Task GetPastLaunchesFromAPI()
        {
            // make API call to get the json data
            HttpResponseMessage response = await Http.GetAsync("https://api.spacexdata.com/v4/launches/past");
            response.EnsureSuccessStatusCode();
            string json = await response.Content.ReadAsStringAsync();
            dynamic obj = JsonConvert.DeserializeObject(json);

            // get the number of launches returned
            int numOfLaunches = Enumerable.Count(obj);

            // create a new Launch object for each returned launch and add it to the list of launches
            for (int i = 0; i < numOfLaunches; i++)
            {
                string dateString = obj[i].date_utc;
                Launch launch = new Launch(Convert.ToString(obj[i].name), DateTime.Parse(dateString), obj[i].success.ToObject<bool>());
                await launch.AddPayloads(obj[i].payloads.ToObject<List<String>>(), Http);
                launch.PatchURL = obj[i].links.patch.small;
                launch.WikiURL = obj[i].links.wikipedia;
                Results.Add(launch);
            }

            // Update the payload mass rankings for the launches
            RankMassForLanches();

            // Put the list in reverse chronological order
            Results.Reverse();
        }

        /// <summary>
        /// Updates each launch's payload mass ranking (heaviest payload being rank 1)
        /// </summary>
        public void RankMassForLanches()
        {
            for (int i = 0; i < Results.Count; i++)
            {
                int currentRank = 1;
                if (Results[i].Mass != 0)
                {
                    for (int j = 0; j < Results.Count; j++)
                    {
                        if (Results[i].Mass < Results[j].Mass && i != j)
                        {
                            currentRank += 1;
                        }
                    }
                    Results[i].MassRank = currentRank;
                }
                else
                {
                    Results[i].MassRank = -1;
                }
            }
        }

    }

    /// <summary>
    /// Stores all necessary information about a SpaceX launch
    /// </summary>
    public class Launch
    {
        public string Name { get; set; }
        public DateTime DateTime { get; set; }
        public bool WasSuccessful { get; set; }

        /// <summary>
        /// A list of unique payload identifiers that are associated with a specific mass. These combine to realize the payload mass.
        /// </summary>
        public List<string> PayloadIDs { get; set; }

        /// <summary>
        /// Payload mass in kilograms
        /// </summary>
        public int Mass { get; set; }

        /// <summary>
        /// Image link for the launch patch
        /// </summary>
        public string PatchURL { get; set; }

        /// <summary>
        /// Wikipedia link for the launch
        /// </summary>
        public string WikiURL { get; set; }

        /// <summary>
        /// The launch's payload mass ranking (heaviest payload being rank 1)
        /// </summary>
        public int MassRank{ get; set; }

        public Launch(string _name, DateTime dateTimeUTC, bool _success)
        {
            Name = _name;
            DateTime = dateTimeUTC.AddHours(-5);
            WasSuccessful = _success;
            PayloadIDs = new List<string>();
            PatchURL = "https://images2.imgbox.com/a7/b4/bcMrHMey_o.png";
        }

        /// <summary>
        /// Adds all the Payload IDs to the list of PayloadIDs and gets the mass for each
        /// </summary>
        public async Task AddPayloads(List<String> PayloadIDs, HttpClient Http)
        {
            foreach (string payload in PayloadIDs)
            {
                await AddPayload(payload, Http);
            }
        }

        /// <summary>
        /// Add a Payload ID to the list of Payload IDs and get the mass the for ID
        /// </summary>
        public async Task AddPayload(string payloadID, HttpClient Http)
        {
            PayloadIDs.Add(payloadID);
            Mass += await GetMassForPayloadID(payloadID, Http);
        }

        /// <summary>
        /// Makes call to SpaceX API to get the mass for a Payload ID
        /// </summary>
        /// <returns>Mass for Payload ID in kilograms</returns>
        private async Task<int> GetMassForPayloadID(string payloadID, HttpClient Http)
        {
            HttpResponseMessage response = await Http.GetAsync("https://api.spacexdata.com/v4/payloads/" + payloadID);
            response.EnsureSuccessStatusCode();
            string json = await response.Content.ReadAsStringAsync();
            dynamic obj = JsonConvert.DeserializeObject(json);

            if (obj.mass_kg == null)
            {
                return 0;
            }
            else
            {
                return obj.mass_kg;
            }
        }

    }

}